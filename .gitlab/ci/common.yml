# ##############################################################
# # Common deployment templates (Copied from Skampi Deployments)
# ##############################################################
.mid:
  variables:
    CONFIG: mid

.on_demand_rules:
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
    - when: never

.integration_rules:
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
    - when: never

.staging_rules:
  variables:
    K8S_INSTALL_FROM_CAR: "true"
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
    - when: never

.deploy:
  stage: deploy
  variables:
    K8S_CHART: "ska-$CONFIG"
    HELM_RELEASE: sut
    KUBE_NAMESPACE: "ci-ska-mid-itf-$CI_PIPELINE_ID-$CONFIG"
    KUBE_NAMESPACE_SDP: "$KUBE_NAMESPACE-sdp"
    K8S_AUTH_NAMESPACES: "$KUBE_NAMESPACE $KUBE_NAMESPACE_SDP"
    K8S_AUTH_SERVICE_ACCOUNT: "ci-svc-ska-miditf-$CI_PIPELINE_ID"
    ARCHIVER_DBNAME: "${CONFIG}_archiver_db_${CI_COMMIT_REF_SLUG}"
    # VALUES: pipeline.yaml
  before_script:
    - ln -snf /usr/share/zoneinfo/$CONTAINER_TIMEZONE /etc/localtime && echo $CONTAINER_TIMEZONE > /etc/timezone
    - sudo apt install inetutils-ping expect sshpass netcat -y
    - ping -c 1 10.20.2.14 || (echo "Cannot reach PDU" && exit 1) #FIXME: This is the type of config data that we should ideally be putting in Vault / Config database
    - nc -zv 10.20.2.14 22 || (echo "Cannot reach PDU SSH interface - go to  https://za-itf-pdu3.ad.skatelescope.org and reset" && exit 1)
  script:
    - mkdir deploy
    - echo $CI_JOB_NAME - $CI_JOB_STAGE > deploy/ci_details.txt # This is just to double-check if the job output to the build folder works
    - bash .make/resources/gitlab_section.sh vars "Make config dump" make vars
    - bash .make/resources/gitlab_section.sh creds "Create K8s Credentials" make itf-cluster-credentials
    - |
      if [ "$K8S_INSTALL_FROM_CAR" != "true" ]; then
        bash .make/resources/gitlab_section.sh install "Installing $K8S_CHART Charts - not from CAR" make k8s-install-chart
      else
        bash .make/resources/gitlab_section.sh install "Installing $K8S_CHART Charts from CAR" make k8s-install-chart-car
      fi
    - bash .make/resources/gitlab_section.sh get-ns "Get namespace resources" make k8s-get
    - bash .make/resources/gitlab_section.sh wait-ns "Wait namespace resources" make k8s-wait
    - make itf-cbf-setup --dry # Just outputting what we'll be attempting - this single target might replace the following four
    - make itf-cbf-talonlru-status
    - bash .make/resources/gitlab_section.sh talon_off "Switch off Talon" make itf-cbf-talonlru-off
    - bash .make/resources/gitlab_section.sh talon_config "Configure Talon(s)" make itf-cbf-config-talon
    - bash .make/resources/gitlab_section.sh talon_download_tangocpp_ds "Download CPP Tango device server updates" make itf-cbf-tangocpp-update &> deploy/talonconfig.log
    - bash .make/resources/gitlab_section.sh talon_config_tangodb "Configure TangoDB with device servers" make itf-cbf-config-tangodb
  after_script:
    - make template-chart
    - make links
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_PIPELINE_ID-$CI_JOB_STAGE-$CI_JOB_NAME"
    paths:
      - "build/"
      - "deploy/"

.info:
  stage: deploy
  variables:
    K8S_CHART: "ska-$CONFIG"
    HELM_RELEASE: sut
    KUBE_NAMESPACE: "ci-ska-mid-itf-$CI_PIPELINE_ID-$CONFIG"
    KUBE_NAMESPACE_SDP: "$KUBE_NAMESPACE-sdp"
  script:
    - bash .make/resources/gitlab_section.sh get-ns "Get namespace resources" make k8s-get
    - bash .make/resources/gitlab_section.sh get-ns-dp "Get SDP namespace resources" make k8s-get KUBE_NAMESPACE=${KUBE_NAMESPACE}-sdp
    - make k8s-info
    - make k8s-info KUBE_NAMESPACE=${KUBE_NAMESPACE}-sdp

.cleanup:
  stage: cleanup
  variables:
    K8S_CHART: "ska-$CONFIG"
    HELM_RELEASE: sut
    KUBE_NAMESPACE: "ci-ska-mid-itf-$CI_PIPELINE_ID-$CONFIG"
    KUBE_NAMESPACE_SDP: "$KUBE_NAMESPACE-sdp"
  script: &cleanup_script
    - echo $CI_JOB_NAME - $CI_JOB_STAGE
    - bash .make/resources/gitlab_section.sh vars "Make config dump" make vars
    - make k8s-uninstall-chart || true
    - |
      if [ "$KEEP_NAMESPACE" != "true" ]; then
        make k8s-delete-namespace
        make k8s-delete-namespace KUBE_NAMESPACE=$KUBE_NAMESPACE_SDP
      fi

.redeploy:
  extends:
    - .deploy
  before_script: *cleanup_script

# If the pipeline is being exectued as a downstream, do not lint
# or build

helm-chart-lint:
  after_script:
    - make helm-check-deps
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - exists:
        - charts/**/*

helm-chart-build:
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - exists:
        - charts/**/*

docs-build:
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - exists:
        - charts/**/*

# Only build images when there are changes
oci-image-lint:
  rules:
    - changes:
        - images/base/Dockerfile
        - pyproject.toml

oci-image-build:
  rules:
    - changes:
        - images/base/Dockerfile
        - pyproject.toml

oci-image-publish:
  rules:
    - changes:
        - images/base/Dockerfile
        - pyproject.toml

oci-image-scan:
  rules:
    - changes:
        - images/base/Dockerfile
        - pyproject.toml

### TARANTA DEPLOYMENT
deploy-taranta:
  stage: platform
  tags:
    - ska-k8srunner-za-itf
  variables:
    KUBE_NAMESPACE: taranta
    KUBE_APP: ska-taranta-backend
    HELM_RELEASE: taranta
    K8S_CHART: taranta-itf
  script:
    - make k8s-install-chart
  when: manual
