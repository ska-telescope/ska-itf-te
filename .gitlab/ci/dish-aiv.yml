# ############################
# # Dish AIV related CICD jobs
# ############################
deploy-dish-structure-simulator:
  tags:
    - ska-k8srunner-za-itf
  image: $CI_REGISTRY/ska-telescope/ska-skampi/ska-skampi-ci:1.0.4
  stage: dish-aiv
  variables:
    MINIKUBE: "false"
    CLUSTER_DOMAIN: miditf.internal.skao.int
    INGRESS_HOST: k8s.miditf.internal.skao.int
    K8S_CHART: dish-structure-simulators
    KUBE_NAMESPACE: dish-structure-simulators
    K8S_EXTRA_PARAMS: --set ds-sim.maxuploadfilesize="131072m"
    SERVICE_ACCOUNT: ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-test-eq
    NEXUS_CACHE: NEXUS_CACHE
  before_script:
    - bash .make/resources/gitlab_section.sh upgrade_poetry "Upgrade Poetry" pip install --upgrade poetry
    - bash .make/resources/gitlab_section.sh vars "Make config dump" make vars
    - bash .make/resources/gitlab_section.sh creds "Create K8s Credentials" make itf-cluster-credentials
  script:
    - make k8s-template-chart
    - make k8s-install-chart
    - mkdir -p build
    - mv manifests.yaml build/ds_sim_manifests.yaml || true
    # - make k8s-get-pods
    - make itf-ds-links
  environment:
    name: dish-structure-simulators/dish-sim-1
    kubernetes:
      namespace: "$KUBE_NAMESPACE"
    url: https://$INGRESS_HOST/$KUBE_NAMESPACE/novnc/
    on_stop: remove-dish-structure-simulator
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - build/
  # when: manual
  needs:
    - remove-dish-structure-simulator
  allow_failure: true # need to keep this to unlock the pipeline

remove-dish-structure-simulator:
  stage: dish-aiv
  tags:
    - ska-k8srunner-za-itf
  variables:
    MINIKUBE: "false"
    CLUSTER_DOMAIN: miditf.internal.skao.int
    INGRESS_HOST: k8s.miditf.internal.skao.int
    K8S_CHART: dish-structure-simulators
    KUBE_NAMESPACE: dish-structure-simulators
    SERVICE_ACCOUNT: ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-test-eq
    NEXUS_CACHE: NEXUS_CACHE
  extends:
    - .uninstall_chart
  environment:
    name: dish-structure-simulators/dish-sim-1
    kubernetes:
      namespace: "$KUBE_NAMESPACE"
    url: https://$INGRESS_HOST/$KUBE_NAMESPACE/novnc/
    action: stop
  when: manual
  allow_failure: true # need to keep this to unlock the pipeline

.deploy-dish-lmc:
  cache: []
  stage: dish-aiv
  tags:
    - ska-k8srunner-za-itf
  variables:
    K8S_EXTRA_PARAMS: -f charts/dish-lmc/values.yaml --set "global.dishes={$DISH_INDEX}"
    CLUSTER_DOMAIN: miditf.internal.skao.int
    INGRESS_HOST: k8s.miditf.internal.skao.int
    K8S_CHART: dish-lmc
    KUBE_NAMESPACE: dish-lmc-$DISH_ID
    KUBE_APP: dish-lmc
    DISH_ID: ska$DISH_INDEX
  before_script:
    - make vars
  script:
    - make k8s-install-chart
    - make itf-dish-links
  when: manual
  needs:
    - helm-chart-build
  allow_failure: true # need to keep this to unlock the pipeline
  environment:
    name: mid-itf/integration/dish-lmc-$DISH_ID
    kubernetes:
      namespace: "$KUBE_NAMESPACE"
    url: https://$INGRESS_HOST/$KUBE_NAMESPACE/taranta/

.destroy-dish-lmc:
  cache: []
  stage: dish-aiv
  tags:
    - ska-k8srunner-za-itf
  variables:
    K8S_EXTRA_PARAMS: -f charts/dish-lmc/values.yaml {$ADDITIONAL_K8S_PARAMS}
    CLUSTER_DOMAIN: miditf.internal.skao.int
    INGRESS_HOST: k8s.miditf.internal.skao.int
    K8S_CHART: dish-lmc
    KUBE_NAMESPACE: dish-lmc-$DISH_ID
    KUBE_APP: dish-lmc
  extends:
    - .uninstall_chart
  needs:
    - helm-chart-build
  environment:
    name: mid-itf/integration/dish-lmc-$DISH_ID
    kubernetes:
      namespace: "$KUBE_NAMESPACE"
    url: https://$INGRESS_HOST/$KUBE_NAMESPACE/taranta/
    action: stop
  when: manual
  allow_failure: true # need to keep this to unlock the pipeline

.deploy-additional-lmc:
  extends:
    - .deploy-dish-lmc
    - .integration_rules
  when: on_success

deploy-dishlmc-ska001:
  extends:
    - .deploy-dish-lmc
  variables:
    DISH_INDEX: "001"
  environment:
    on_stop: uninstall-dishlmc-ska001

uninstall-dishlmc-ska001:
  extends:
    - .destroy-aa05-dishes
  variables:
    DISH_ID: ska001

deploy-dishlmc-ska002:
  stage: dish-aiv
  extends:
    - .deploy-dish-lmc
  variables:
    DISH_INDEX: "002"
    ADDITIONAL_K8S_PARAMS: charts/dish-lmc/values-spfc.yaml
  environment:
    on_stop: uninstall-dishlmc-ska002

uninstall-dishlmc-ska002:
  stage: dish-aiv
  extends:
    - .destroy-aa05-dishes
  variables:
    DISH_ID: ska002

deploy-aa05-dishes:
  stage: on_demand_itf_sut
  extends:
    - .sut_base_no_cache
    - .integration_rules
  script:
    - echo "Deploying multiple dishes in downstream dish-aiv stage - first deploy ska001 manually"
    - echo "Deploying 'SKA001', 'SKA036', 'SKA063', 'SKA100'"
  environment:
    name: mid-itf/integration/dish-lmc-aa05
    on_stop: uninstall-aa05-dishes

uninstall-aa05-dishes:
  stage: on_demand_itf_sut
  extends:
    - .sut_base_no_cache
    - .integration_rules
  script:
    - echo "Uninstalling all dishes in downstream dish-aiv stage"
    - echo "Uninstalling 'SKA001', 'SKA036', 'SKA063', 'SKA100'"
  environment:
    name: mid-itf/integration/dish-lmc-aa05
    action: stop

deploy-dishlmc-ska036:
  extends:
    - .deploy-additional-lmc
  needs:
    - deploy-dishlmc-ska001
    - deploy-aa05-dishes
  variables:
    DISH_INDEX: "036"
  environment:
    on_stop: uninstall-dishlmc-ska036

deploy-dishlmc-ska063:
  extends:
    - .deploy-additional-lmc
  needs:
    - deploy-dishlmc-ska036
  variables:
    DISH_INDEX: "063"
  environment:
    on_stop: uninstall-dishlmc-ska063

deploy-dishlmc-ska100:
  extends:
    - .deploy-additional-lmc
  needs:
    - deploy-dishlmc-ska063
  variables:
    DISH_INDEX: "100"
  environment:
    on_stop: uninstall-dishlmc-ska100

.destroy-aa05-dishes:
  extends:
    - .destroy-dish-lmc
    - .integration_rules
  when: on_success
  needs:
    - uninstall-aa05-dishes
  environment:
    name: mid-itf/integration/dish-lmc-$DISH_ID

uninstall-dishlmc-ska001:
  extends:
    - .destroy-aa05-dishes
  variables:
    DISH_ID: ska001

uninstall-dishlmc-ska036:
  extends:
    - .destroy-aa05-dishes
  variables:
    DISH_ID: ska036

uninstall-dishlmc-ska063:
  extends:
    - .destroy-aa05-dishes
  variables:
    DISH_ID: ska063

uninstall-dishlmc-ska100:
  extends:
    - .destroy-aa05-dishes
  variables:
    DISH_ID: ska100

register-spfc:
  stage: on_demand_itf_sut
  tags:
    - ska-k8srunner-za-itf
  image: artefact.skao.int/ska-tango-images-pytango-runtime:9.4.3
  variables:
    SERVICE_NAME: tango-databaseds
    NAMESPACE: dish-lmc-ska001
    TANGO_HOST: "0.0.0.0:10000"
    SPFC_HOST: "10.165.3.28"
    KUBECTL_CMD: "docker run -rm -it artefact.skao.int/ska-cicd-k8s-tools-build-deploy:0.9.0 kubectl"
    SPFC_SERIAL: ""
    DEVICE_LOCATION: "ska002"
  script:
    #Install register SPFC
    - echo "Resolving Dish.LMC tango database"
    - docker run -rm -it artefact.skao.int/ska-cicd-k8s-tools-build-deploy:0.9.0 kubectl
    - export TANGO_HOST=$(${KUBECTL_CMD} -n ${NAMESPACE} get svc ${SERVICE_NAME} -o jsonpath={.status.loadBalancer.ingress[0].ip})
    - echo "Installing scp"
    - sudo apt-get update && sudo apt-get install -y openssh-client
    - echo "Updating TANGO_HOST in the SPFC through tango_host.ini file."
    - scp resources/ansible-playbooks/roles/update_spfc/templates/tango_host.ini.j2 skao@10.165.3.28:/home/skao/tango_host.ini
    #Extract serial number from SPFC's config file
    - SPFC_SERIAL=$(ssh -t skao@${SPFC_HOST} "grep -A1 "Serial_Nr" /var/lib/spfc/spfc/spfc_config.ini | grep "SPFC"")
    - python scripts/spfc/register_device.py ${DEVICE_LOCATION} ${PFC_SERIAL}
    - ssh spfc@{SPFC_HOST} -t sudo /bin/systemctl restart spfc-system.target
    #Now restart spfc-system.target service
    - echo "Restarting spfc-system.target"
    - ssh -t skao@10.165.3.28 "sudo /bin/systemctl restart spfc-system.target"
  when: manual