# ##############################################################
# # Common deployment templates (Copied from Skampi Deployments)
# ##############################################################
.deploy:
  stage: deploy
  image: $DEPLOY_IMAGE
  before_script:
    - |
      if [ "$CBF_HW_IN_THE_LOOP" == "true" ]; then
        # apt-get update && apt-get install iputils-ping netcat -y
        ping -c 1 $PDU_IP || (echo "Cannot reach PDU") #FIXME: This is the type of config data that we should ideally be putting in Vault / Config database
        nc -zv $PDU_IP 22 || (echo "Cannot reach PDU SSH interface - go to  https://za-itf-pdu3.ad.skatelescope.org and reset" && exit 1)
      fi
    # - bash .make/resources/gitlab_section.sh poetry "Install Python dependencies" poetry install
  script:
    - mkdir deploy
    - bash .make/resources/gitlab_section.sh poetry "Poetry Install" poetry install
    - export PATH=.venv/bin:${PATH} # TEMPORARY COMMIT: fix in one place
    - echo $CI_JOB_NAME - $CI_JOB_STAGE > deploy/ci_details.txt # This is just to double-check if the job output to the build folder works
    - echo $CI_JOB_NAME - $CI_JOB_STAGE
    - |
      if [ "$DISH_LMC_IN_THE_LOOP" != "true" ]; then
        export TMC_VALUES_PATH=charts/ska-mid-itf-sut/values.yaml
      else
        bash .make/resources/gitlab_section.sh tmc-values "Generate tmc-values.yaml file from Dish IDs" make itf-dish-ids
      fi
    - bash .make/resources/gitlab_section.sh vars "Make config dump" make vars
    - bash .make/resources/gitlab_section.sh creds "Create K8s Credentials" make itf-cluster-credentials
    - |
      if [ "$K8S_INSTALL_FROM_CAR" != "true" ]; then
        bash .make/resources/gitlab_section.sh install "Installing $K8S_CHART Charts - not from CAR" make k8s-install-chart
      else
        bash .make/resources/gitlab_section.sh install "Installing $K8S_CHART Charts from CAR" make k8s-install-chart-car
      fi
    - bash .make/resources/gitlab_section.sh wait-ns "Wait namespace resources" make k8s-wait
    - make links
    - |
      if [ "$CBF_HW_IN_THE_LOOP" == "true" ]; then
        bash .make/resources/gitlab_section.sh dress-rehearsal "Check steps that will be followed first" make itf-cbf-setup --dry;
        bash .make/resources/gitlab_section.sh dress-rehearsal "Check Talon status" make itf-cbf-talonlru-status && sleep 1;
        bash .make/resources/gitlab_section.sh talon_off "Switch off Talon" make itf-cbf-talonlru-off && sleep 3;
        bash .make/resources/gitlab_section.sh mcs_config "Configure MCS" make itf-cbf-config-mcs && sleep 3;
        bash .make/resources/gitlab_section.sh talon_on "Talon Tango ON" make itf-cbf-tango-on && sleep 3;
      fi
    - make pvc-patch-apply
    - |
      if [ "$DISH_LMC_IN_THE_LOOP" == "true" ]; then 
        bash .make/resources/gitlab_section.sh install_tangoGQL "Install TangoGQL for multiDB" make taranta-deploy-all-tangogql-instances;
      fi
    - env | grep RUNNER_AFTER_SCRIPT_TIMEOUT
    - bash .make/resources/gitlab_section.sh template "Output deployment config information" make get-deployment-config-info
    - bash .make/resources/gitlab_section.sh smoketest "Smoke Test Deployment" pytest tests/smoke/ || true
  after_script:
    - make links
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_PIPELINE_ID-$CI_JOB_STAGE-$CI_JOB_NAME"
    paths:
      - "build/"
      - "deploy/"
  variables:
    SWITCH_CSP_ON: "false"
    SUT_CHART_DIR: ${CI_PROJECT_DIR}/charts/ska-mid-itf-sut
    RUNNER_AFTER_SCRIPT_TIMEOUT: 6m

.info:
  stage: deploy
  script:
    - bash .make/resources/gitlab_section.sh get-ns "Get namespace resources" make k8s-get
    - bash .make/resources/gitlab_section.sh get-ns-dp "Get SDP namespace resources" make k8s-get KUBE_NAMESPACE=${KUBE_NAMESPACE}-sdp
    - make k8s-info
    - make k8s-info KUBE_NAMESPACE=${KUBE_NAMESPACE}-sdp

.cleanup:
  stage: cleanup
  script: &cleanup_script
    - echo $CI_JOB_NAME - $CI_JOB_STAGE
    - bash .make/resources/gitlab_section.sh vars "Make config dump" make vars
    - bash .make/resources/gitlab_section.sh pvc-running "Check which PVCs are currently in SDP namespace" make pvc-check KUBE_NAMESPACE=$KUBE_NAMESPACE_SDP
    - make pvc-patch-delete || true
    - make k8s-uninstall-chart || true
    - |
      if [ "$KEEP_NAMESPACE" != "true" ]; then
        make k8s-delete-namespace
        if [ "$KUBE_NAMESPACE_SDP" != "" ]; then
          kubectl wait --for=delete pvc/staging-pvc -n $KUBE_NAMESPACE_SDP --timeout=60s
          make k8s-delete-namespace KUBE_NAMESPACE=$KUBE_NAMESPACE_SDP
        fi
      fi

.redeploy:
  extends:
    - .deploy
  before_script: *cleanup_script

.uninstall-chart:
  script:
    - echo $CI_JOB_NAME - $CI_JOB_STAGE
    - bash .make/resources/gitlab_section.sh vars "Make config dump" make vars
    - bash .make/resources/gitlab_section.sh env "Environment dump" env
    - make k8s-uninstall-chart || true
    - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all --ignore-not-found
    - make k8s-delete-namespace

# If the pipeline is being exectued as a downstream, do not lint
# or build
helm-chart-lint:
  after_script:
    - make helm-check-deps
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - exists: 
        - charts/**/*

helm-chart-build:
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - exists:
        - charts/**/*

docs-build:
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - exists:
        - charts/**/*

.dish_logs_script: &get_dish_logs
  - |
    for DISH_ID in $DISH_IDS; do
      DISH_ID_LOWERCASE=${DISH_ID,,}
      if [[ -n "$CI_COMMIT_TAG" ]]; then
        bash .make/resources/gitlab_section.sh dish-$DISH_ID_LOWERCASE-logs "Collecting dish ${DISH_ID} logs" bash -c "KUBE_NAMESPACE=staging-dish-lmc-$DISH_ID_LOWERCASE make dish-logs"
      elif [[ "$CI_COMMIT_BRANCH" != "$CI_DEFAULT_BRANCH" ]]; then
        bash .make/resources/gitlab_section.sh dish-$DISH_ID_LOWERCASE-logs "Collecting dish ${DISH_ID} logs" bash -c "KUBE_NAMESPACE=ci-dish-lmc-$DISH_ID_LOWERCASE-$CI_COMMIT_REF_NAME make dish-logs"
      else
        bash .make/resources/gitlab_section.sh dish-$DISH_ID_LOWERCASE-logs "Collecting dish ${DISH_ID} logs" bash -c "KUBE_NAMESPACE=integration-dish-lmc-$DISH_ID_LOWERCASE make dish-logs"
      fi
    done

.test-end-to-end-with-hw:
  artifacts:
    paths:
      - build/sequence-diagram.puml
      - config/
      - sut-logs/
    when: always
  variables:
    INTEGRATION_TEST_SOURCE: tests/integration/tmc/test_end_to_end.py::test_e2e_via_tmc_slow
    E2E_TEST_EXECUTION_NAMESPACE: $KUBE_NAMESPACE
    SIM_MODE: false
    ADDMARKS: ""
    MARKS: ""
    PYTEST_ADDOPTS: --log-cli-level=INFO
  before_script:
    - make vars
    - mkdir -p config
    - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
    - "make help | grep k8s-test"
    - bash .make/resources/gitlab_section.sh poetry "Poetry Install" poetry install
    - export TANGO_HOST=tango-databaseds.$E2E_TEST_EXECUTION_NAMESPACE.svc.miditf.internal.skao.int:10000
    - bash .make/resources/gitlab_section.sh template "Output deployment config information" make get-deployment-config-info
    - make print-telescope-state || true
  script:
    - make teardown-telescope || true
    - make integration-test
    - '[ -f build/status ] || (echo "Something went wrong with the test (no build/status file); exit 1")'
    - exit $(cat build/status)
  after_script:
    - bash .make/resources/gitlab_section.sh sut-logs "Collecting CBF logs" make cbf-logs
    - bash .make/resources/gitlab_section.sh tmc-logs "Collecting TMC logs" make tmc-logs
    - bash .make/resources/gitlab_section.sh csp-logs "Collecting CSP logs" make csp-logs
    - *get_dish_logs

.test-telescope-on-with-hw:
  extends:
    - .test-end-to-end-with-hw
  variables:
    INTEGRATION_TEST_SOURCE: tests/integration/tmc/test_telescope_on.py::test_telescope_on_via_tmc
    ADDMARKS: ""

.test-scan-with-hw:
  extends:
    - .test-end-to-end-with-hw
  variables:
    INTEGRATION_TEST_SOURCE: tests/integration/tmc/test_scan.py::test_perform_a_scan_via_tmc
    ADDMARKS: ""
  script:
    - make teardown-telescope-to-pre-assign || true
    - make integration-test
    - '[ -f build/status ] || (echo "Something went wrong with the test (no build/status file); exit 1")'
    - exit $(cat build/status)

.test-telescope-off-with-hw:
  extends:
    - .test-end-to-end-with-hw
  variables:
    INTEGRATION_TEST_SOURCE: tests/integration/tmc/test_telescope_off.py::test_telescope_off_via_tmc
    ADDMARKS: ""
  script:
    - make teardown-telescope || true
    - make integration-test
    - '[ -f build/status ] || (echo "Something went wrong with the test (no build/status file); exit 1")'
    - exit $(cat build/status)
