# ############################################
# # System Under Test Deployment and Test jobs
# ############################################
.ci-env:
  tags:
    - ska-k8srunner-za-itf
  variables:
    CONFIG: mid
    K8S_CHART: "ska-mid-itf-sut"
    KUBE_NAMESPACE: ci-ska-mid-itf-$CI_COMMIT_REF_NAME
    KUBE_NAMESPACE_SDP: "$KUBE_NAMESPACE-sdp"
    CLUSTER_DOMAIN: "miditf.internal.skao.int"
    K8S_EXTRA_PARAMS: "--set global.ska-tango-archiver.enabled=true --set ska-tango-archiver.enabled=true --set ska-tango-archiver.dbuser=admin --set ska-tango-archiver.dbpassword=${EDA_DB_PASSWORD} --set ska-tango-archiver.archviewer.instances[0].timescale_login=admin:${EDA_DB_PASSWORD} --set ska-tango-archiver.archviewer.instances[0].timescale_databases=itf_eda --set ska-tango-archiver.archviewer.instances[0].timescale_host=10.164.11.33 --set ska-tango-archiver.archviewer.instances[0].name=mid"
    CLUSTER_DOMAIN_POSTFIX: miditf.internal.skao.int
    KUBE_APP: ska-mid-sut
    INGRESS_HOST: "k8s.miditf.internal.skao.int"
    TANGO_DATABASE_DS: tango-databaseds
    ARCHIVER_DBNAME: "${CONFIG}_archiver_db_${CI_COMMIT_REF_SLUG}"
    HELM_RELEASE: sut
    K8S_AUTH_NAMESPACES: $KUBE_NAMESPACE $KUBE_NAMESPACE_SDP
    K8S_AUTH_SERVICE_ACCOUNT: ci-svc-ska-miditf-$CI_PIPELINE_ID
    PDU_IP: 10.20.2.14
    SERVICE_ACCOUNT: ci-svc-ska-miditf-$CI_COMMIT_REF_NAME
    CBF_HW_IN_THE_LOOP: "false"
    DISH_LMC_IN_THE_LOOP: "true"
    K8S_TIMEOUT: 420s

.on-demand-stage:
  stage: on_demand_itf_sut

deploy-sut-on-demand:
  extends:
    - .deploy
    - .ci-env
    - .on_demand_rules
    - .on-demand-stage

  environment:
    name: mid-itf/ska-$CONFIG-$CI_COMMIT_REF_SLUG
    kubernetes:
      # This repetition is needed for gitlab to parse the namespace correctly
      namespace: $KUBE_NAMESPACE
    url: "http://$INGRESS_HOST/$KUBE_NAMESPACE/taranta"
    on_stop: destroy-sut-on-demand

redeploy-sut-on-demand:
  extends:
    - .redeploy
    - .ci-env
    - .on_demand_rules
    - .on-demand-stage
  environment:
    name: mid-itf/ska-$CONFIG-$CI_COMMIT_REF_SLUG
    kubernetes:
      # This repetition is needed for gitlab to parse the namespace correctly
      namespace: $KUBE_NAMESPACE
    url: "http://$INGRESS_HOST/$KUBE_NAMESPACE/taranta"
    on_stop: destroy-sut-on-demand

info-sut-on-demand:
  extends:
    - .info
    - .ci-env
    - .on_demand_rules
    - .on-demand-stage

destroy-sut-on-demand:
  extends:
    - .cleanup
    - .ci-env
    - .on_demand_rules
    - .on-demand-stage
  environment:
    name: mid-itf/ska-$CONFIG-$CI_COMMIT_REF_SLUG
    kubernetes:
      # This repetition is needed for gitlab to parse the namespace correctly
      namespace: $KUBE_NAMESPACE
    url: "http://$INGRESS_HOST/$KUBE_NAMESPACE/taranta"
    action: stop

k8s-test-runner:
  tags:
    - ska-k8srunner-za-itf
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_PIPELINE_ID"
    paths:
      - "build/"
      - "config/"
      - "logs/"
  extends:
    - .ci-env
  before_script:
    - make vars
    - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
    - "make help | grep k8s-test"
    - kubectl delete deployment sut-config-inspector --namespace $KUBE_NAMESPACE --ignore-not-found
    - bash .make/resources/gitlab_section.sh poetry "Poetry Install" poetry install
    - bash .make/resources/gitlab_section.sh namespaces "Create namespaces" make sut-namespaces
    - bash .make/resources/gitlab_section.sh install "K8S Install" make k8s-install-chart
    - bash .make/resources/gitlab_section.sh wait "K8S wait" make k8s-wait
    - make itf-cbf-setup --dry
    - mkdir -p build config
    - env > build/environment.txt
  script:
    - make integration-test TANGO_HOST=$TANGO_DATABASE_DS.$KUBE_NAMESPACE.svc.$CLUSTER_DOMAIN:10000 || true
    - echo "Test command exit code - $(cat build/status)"
    - make cbf-logs && make tmc-logs && make csp-logs
    - |
      if [[ 0 == "$(cat build/status)" || "$REMOVE_FAILED_TEST_DEPLOYMENT" == "true" ]]; then
        make remove-sut-deployment
      else
        echo "#####################################################################################"
        echo "# NOTE: this deployment will persist for about 2 hours, for investigation purposes. #"
        echo "#####################################################################################"
        bash .make/resources/gitlab_section.sh creds "Create K8s Credentials" make itf-cluster-credentials
        make links
      fi
    - '[ -f build/status ] || (echo "Something went wrong with the test (no build/status file); exit 1")'
    - exit $(cat build/status)
  variables:
    DEBUG_ENTRYPOINT: "True"
    DEBUG_ENTRYPOINT_EXTENDED: "True"
    LIVE_LOGGING_EXTENDED: "True"
    SHOW_STEP_FUNCTIONS: "True"
    CAPTURE_LOGS: "True"
    EXIT_AT_FAIL: "True"
    REMOVE_FAILED_TEST_DEPLOYMENT: "false"
    K8S_TEST_RUNNER_PARAMS: --set ska-tmc-mid.deviceServers.mocks.dish=true --set ska-tmc-mid.deviceServers.mocks.enabled=true
    DISH_LMC_IN_THE_LOOP: "false"
    ADDMARKS: True
    MARKS: "'not hw_in_the_loop'"
    SIM_MODE: "true"
    SUT_CLUSTER_DOMAIN: miditf.internal.skao.int

stop-k8s-test-runner:
  tags:
    - ska-k8srunner-za-itf
  script:
    - make remove-sut-deployment
  extends:
    - .ci-env
  when: manual
  variables:
    KUBE_NAMESPACE_SDP: "$KUBE_NAMESPACE-sdp"

publish-k8s-test-results:
  stage: publish
  needs:
    #- test-telescope-on
    - test-telescope-off
    #- test-scan
    #- test-end-to-end
    #- k8s-test-runner #Uncomment before Merge
    - xray-publish
  tags:
    - ska-k8srunner-za-itf
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_PIPELINE_ID"
    paths:
      - "build/"
  extends:
    - .ci-env
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_COMMIT_REF_NAME #use $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH before Merge
      when: always
    - when: never
  script:
    - echo "Test result code from k8s-test-runner job was $(cat build/status)"
    - poetry install
    - make upload-to-confluence

# ############################################
# # Dish Strcuture Simulator related CICD jobs
# ############################################
deploy-aa05-ds-sim:
  extends:
    - .ci-env
    - .on-demand-stage
  script:
    - echo "Deploying multiple dish structure simulators in downstream dish-aiv stage - first deploy ska001 manually"
    - echo "Deploying 'SKA001', 'SKA036', 'SKA063', 'SKA100'"
  environment:
    name: mid-itf/integration/dish-structure-simulator-aa05
    on_stop: remove-aa05-ds-sim
  when: manual

remove-aa05-ds-sim:
  extends:
    - .ci-env
    - .on-demand-stage
  script:
    - echo "Uninstalling all dish structure simulators in downstream dish-aiv stage"
    - echo "Uninstalling 'SKA001', 'SKA036', 'SKA063', 'SKA100'"
  environment:
    name: mid-itf/integration/dish-structure-simulator-aa05
    action: stop
  when: manual

# ############################################
# # On-demand test jobs
# ############################################

.test-ci-rules:
  rules:
    - if: $EXECUTE_E2E_WITH_HW == "true"
      when: on_success
      allow_failure: true
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: never
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true
    - when: never

test-end-to-end:
  stage: test
  extends:
    - .ci-env
    - .test-end-to-end-with-hw
    - .test-ci-rules

test-telescope-on:
  stage: test
  extends:
    - .ci-env
    - .test-telescope-on-with-hw
    - .test-ci-rules

test-scan:
  stage: test
  extends:
    - .ci-env
    - .test-scan-with-hw
    - .test-ci-rules

test-telescope-off:
  stage: test
  extends:
    - .ci-env
    - .test-telescope-off-with-hw
    - .test-ci-rules
