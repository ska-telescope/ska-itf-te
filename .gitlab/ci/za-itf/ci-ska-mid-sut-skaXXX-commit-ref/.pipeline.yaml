.aa05-env:
  stage: on_demand_itf_sut
  tags:
    - ska-k8srunner-za-itf
  variables:
    CONFIG: mid
    K8S_CHART: system-under-test
    KUBE_NAMESPACE: ci-ska-mid-itf-$CI_COMMIT_REF_NAME
    CLUSTER_DOMAIN: "miditf.internal.skao.int"
    CLUSTER_DOMAIN_POSTFIX: miditf.internal.skao.int
    DISH_IDS: "SKA001 SKA036 SKA063 SKA100"
    KUBE_APP: ska-mid-sut
    INGRESS_HOST: "k8s.miditf.internal.skao.int"
    K8S_EXTRA_PARAMS: "--set global.ska-tango-archiver.enabled=false  --set ska-tango-archiver.enabled=false"
    TANGO_DATABASE_DS: tango-databaseds
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: manual
      variables:
        KUBE_NAMESPACE_PREFIX: dish-lmc-
        ENV_NAME: dish.itf/dish-lmc-aa05
      allow_failure: true
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      when: manual
      variables:
        KUBE_NAMESPACE: "ci-$KUBE_APP-$DISH_ID-$CI_COMMIT_REF_NAME"
        KUBE_NAMESPACE_PREFIX: ci-dish-lmc-
        KUBE_NAMESPACE_POSTFIX: -$CI_COMMIT_REF_NAME
        ENV_NAME: dish.itf/ci-dish-lmc-aa05-$CI_COMMIT_REF_NAME
      allow_failure: true
  environment:
    name: $ENV_NAME

deploy-aa05-dishes:
  extends:
    - .aa05-env
  script:
    - echo "Deploying multiple dishes in downstream dish-aiv stage - first deploy ska001 manually"
    - echo "Deploying dishes $DISH_IDS:"
    - |
      make itf-dish-ids
      cat charts/system-under-test/tmc-values.yaml
  environment:
    on_stop: uninstall-aa05-dishes

redeploy-aa05-dishes:
  extends:
    - .aa05-env
  script:
    - echo "Redeploying multiple dishes in downstream dish-aiv stage - first deploy ska001 manually"
    - echo "Redeploying 'SKA001', 'SKA036', 'SKA063', 'SKA100'"
  environment:
    on_stop: uninstall-aa05-dishes

uninstall-aa05-dishes:
  extends:
    - .aa05-env
  script:
    - echo "Uninstalling all dishes in downstream dish-aiv stage"
    - echo "Uninstalling 'SKA001', 'SKA036', 'SKA063', 'SKA100'"
  environment:
    action: stop

.start-spfrx-20:
  stage: on_demand_itf_sut
  variables:
    KUBE_NAMESPACE: "spfrx"
    KUBE_NAMESPACE_SDP: "$KUBE_NAMESPACE-sdp"
  tags:
    - k8srunner-psi-mid
  script:
    echo "See logs of spfrx pod"
    # - kubectl exec -n $KUBE_NAMESPACE spfrx-deployer -- /bin/bash scripts/spfrx-remote-stop.sh "$SPFRX_ADDRESS" "$SPFRX_BIN"
    # - kubectl exec -n $KUBE_NAMESPACE spfrx-deployer -- python3 spfrx_deployer.py --generate-spfrx-config --dish_id=$DISH_ID
    # - kubectl exec -n $KUBE_NAMESPACE spfrx-deployer -- python3 spfrx_deployer.py --download-artifacts --dish_id=$DISH_ID
    # - kubectl exec -n $KUBE_NAMESPACE spfrx-deployer -- python3 spfrx_deployer.py --config-db --dish_id=$DISH_ID
    # - kubectl exec -n $KUBE_NAMESPACE spfrx-deployer -- /bin/bash scripts/spfrx-deploy-artifacts.sh $SPFRX_ADDRESS $SPFRX_LOCAL_DIR $SPFRX_BIN $SPFRX_SCRIPTS_DIR
    # - kubectl exec -n $KUBE_NAMESPACE spfrx-deployer -- /bin/bash scripts/program-bitstream-remote.sh $SPFRX_LOCAL_DIR $SPFRX_ADDRESS
    # - TANGO_HOSTNAME=$(echo $TANGO_HOST | cut -d':' -f1)
    # - TANGO_PORT=$(echo $TANGO_HOST | cut -d':' -f2)
    # - kubectl exec -n $KUBE_NAMESPACE spfrx-deployer -- /bin/bash scripts/spfrx-remote-start.sh "$TANGO_HOSTNAME.$KUBE_NAMESPACE.svc.$CLUSTER_DOMAIN:$TANGO_PORT" "$SPFRX_ADDRESS" "$SPFRX_BIN" "$TANGO_INSTANCE" "$SPFRX_LOGGING_LEVEL" &
    # - sleep 30
  # rules:
  #   - when: manual
  needs:
    - job:
