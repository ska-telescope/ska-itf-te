image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  # images/ska-mid-itf/Dockerfile uses the project root as its build context.
  OCI_IMAGE_BUILD_CONTEXT: ${CI_PROJECT_DIR}
cache:
  paths:
    - build
stages:
  - lint
  - build
  # - staging
  - test
  - test-equipment-setup
  - integration
  - upload
  - publish
  - pages
  - scan
include:
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/python.gitlab-ci.yml"
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/docs.gitlab-ci.yml"
  # OCI Images
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/oci-image.gitlab-ci.yml"
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/finaliser.gitlab-ci.yml"
  # Helm Charts
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/helm-chart.gitlab-ci.yml"
  # k8s steps
  # - project: "ska-telescope/templates-repository"
  #   file: "gitlab-ci/includes/k8s.gitlab-ci.yml"

  # changelog release page
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/changelog.gitlab-ci.yml"

  # deploy steps
  # - project: "ska-telescope/templates-repository"
  #   file: "gitlab-ci/includes/deploy.gitlab-ci.yml"

python-test:
  image: artefact.skao.int/ska-tango-images-pytango-builder:9.3.32
  before_script:
    - bash .make/resources/gitlab_section.sh upgrade_poetry "Upgrade Poetry" pip install --upgrade poetry

python-lint:
  image: artefact.skao.int/ska-tango-images-pytango-builder:9.3.32
  before_script:
    - bash .make/resources/gitlab_section.sh upgrade_poetry "Upgrade Poetry" pip install --upgrade poetry
  rules:
    - allow_failure: true

deploy-test-equipment:
  tags:
    - ska-k8srunner-za-itf
  image: $CI_REGISTRY/ska-telescope/ska-skampi/ska-skampi-ci:1.0.4
  stage: test-equipment-setup
  variables:
    MINIKUBE: "false"
    CLUSTER_DOMAIN: miditf.internal.skao.int
    INGRESS_HOST: k8s.miditf.internal.skao.int
    K8S_CHART: ska-mid-itf
    KUBE_NAMESPACE: test-equipment
    # KUBE_NAMESPACE: ci-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-test-eq
    KUBE_NAMESPACE_SDP: $KUBE_NAMESPACE-sdp
    SERVICE_ACCOUNT: ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-test-eq
    NEXUS_CACHE: NEXUS_CACHE
  before_script:
    - bash .make/resources/gitlab_section.sh upgrade_poetry "Upgrade Poetry" pip install --upgrade poetry
    - bash .make/resources/gitlab_section.sh vars "Make config dump" make vars
    - bash .make/resources/gitlab_section.sh creds "Create K8s Credentials" make itf-cluster-credentials
  script:
    - make itf-te-template
    - make itf-te-install
    # The following are all needed to verify deployment and expose the issue
    - make k8s-wait SKA_TANGO_OPERATOR=true
    - kubectl logs -l job-name=signalgenerator-test-config -n $KUBE_NAMESPACE
    - make k8s-get-pods
    - make itf-te-links
  environment:
    name: ska-mid-itf/test-equipment
    kubernetes:
      namespace: "$KUBE_NAMESPACE"
    url: https://$INGRESS_HOST/$KUBE_NAMESPACE/taranta
    on_stop: remove-test-equipment
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - build/
    reports:
      junit:
        - build/report.xml
  # when: manual
  needs:
    - remove-test-equipment
  allow_failure: true # need to keep this to unlock the pipeline

generate-skysimctl-config:
  stage: test-equipment-setup
  tags:
    - ska-k8srunner-za-itf
  script: make itf-te-pass-env
  artifacts:
    reports:
      dotenv: build/deploy.env
    untracked: false
    when: on_success
    paths:
      - build/
  needs:
    - deploy-test-equipment

deploy-skysimctl-install:
  stage: test-equipment-setup
  trigger:
    project: ska-telescope/ska-te-mid-skysimctl
    branch: main
  inherit:
    variables: false
  needs:
    - generate-skysimctl-config

remove-test-equipment:
  stage: test-equipment-setup
  tags:
    - ska-k8srunner-za-itf
  variables:
    K8S_CHART: ska-mid-itf
    KUBE_NAMESPACE: test-equipment
    CLUSTER_DOMAIN: miditf.internal.skao.int
    INGRESS_HOST: k8s.miditf.internal.skao.int
    KUBE_NAMESPACE_SDP: $KUBE_NAMESPACE-sdp
    SERVICE_ACCOUNT: ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-test-eq
    NEXUS_CACHE: NEXUS_CACHE
  extends:
    - .uninstall_chart
  environment:
    name: ska-mid-itf/test-equipment
    kubernetes:
      # This repetition is needed for gitlab to parse the namespace correctly
      namespace: $KUBE_NAMESPACE
    url: "https://$INGRESS_HOST/$KUBE_NAMESPACE/taranta"
    action: stop
  when: manual
  allow_failure: true # need to keep this to unlock the pipeline

.setup-ansible:
  tags:
    - k8srunner
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  before_script:
    - export LC_ALL="C.UTF-8" # ansible requires locale to be set to UTF-8.
    - export PATH=${PATH}:${HOME}/.local/bin # this is where python installs ansible.
    - python3 -m pip install --user ansible
    - python3 -m pip install --user ansible-lint

ansible-lint:
  stage: lint
  extends: .setup-ansible
  script:
    - cd resources/ansible-playbooks && make lint

ansible-test:
  stage: test
  services:
    - name: registry.gitlab.com/ska-telescope/ska-mid-itf/ansible-test-default:0.0.0
      alias: ansible-test-default
    - name: registry.gitlab.com/ska-telescope/ska-mid-itf/ansible-test-default:0.0.0
      alias: ansible-test-raspberry-pi
    - name: registry.gitlab.com/ska-telescope/ska-mid-itf/ansible-test-gaia:0.0.0
      alias: ansible-test-gaia
  extends: .setup-ansible
  script:
    - cd resources/ansible-playbooks
    - make test-cicd

#### FROM SKAMPI, COPIED FOR REFERENCE:
.uninstall_chart:
  script:
    - echo $CI_JOB_NAME - $CI_JOB_STAGE
    - bash .make/resources/gitlab_section.sh vars "Make config dump" make vars
    - bash .make/resources/gitlab_section.sh env "Environment dump" env
    - make k8s-uninstall-chart || true
    - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all --ignore-not-found
    - kubectl -n $KUBE_NAMESPACE_SDP delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all --ignore-not-found
    - make k8s-delete-namespace

deploy-dish-structure-simulator:
  tags:
    - ska-k8srunner-za-itf
  image: $CI_REGISTRY/ska-telescope/ska-skampi/ska-skampi-ci:1.0.4
  stage: integration
  variables:
    MINIKUBE: "false"
    CLUSTER_DOMAIN: miditf.internal.skao.int
    INGRESS_HOST: k8s.miditf.internal.skao.int
    K8S_CHART: dish-structure-simulators
    KUBE_NAMESPACE: dish-structure-simulators
    # KUBE_NAMESPACE_SDP: $KUBE_NAMESPACE-sdp
    SERVICE_ACCOUNT: ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-test-eq
    NEXUS_CACHE: NEXUS_CACHE
  before_script:
    - bash .make/resources/gitlab_section.sh upgrade_poetry "Upgrade Poetry" pip install --upgrade poetry
    - bash .make/resources/gitlab_section.sh vars "Make config dump" make vars
    - bash .make/resources/gitlab_section.sh creds "Create K8s Credentials" make itf-cluster-credentials
  script:
    - make itf-ds-template
    - make itf-ds-install
    # - make k8s-get-pods
    - make itf-ds-links
  environment:
    name: dish-structure-simulators/dish-sim-1
    kubernetes:
      namespace: "$KUBE_NAMESPACE"
    url: https://$INGRESS_HOST/$KUBE_NAMESPACE/novnc/
    on_stop: remove-dish-structure-simulator
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - build/
    reports:
      junit:
        - build/report.xml
  # when: manual
  needs:
    - remove-dish-structure-simulator
  allow_failure: true # need to keep this to unlock the pipeline

remove-dish-structure-simulator:
  stage: integration
  tags:
    - ska-k8srunner-za-itf
  variables:
    MINIKUBE: "false"
    CLUSTER_DOMAIN: miditf.internal.skao.int
    INGRESS_HOST: k8s.miditf.internal.skao.int
    K8S_CHART: dish-structure-simulators
    KUBE_NAMESPACE: dish-structure-simulators
    # KUBE_NAMESPACE_SDP: $KUBE_NAMESPACE-sdp
    SERVICE_ACCOUNT: ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-test-eq
    NEXUS_CACHE: NEXUS_CACHE
  extends:
    - .uninstall_chart
  environment:
    name: dish-structure-simulators/dish-sim-1
    kubernetes:
      namespace: "$KUBE_NAMESPACE"
    url: https://$INGRESS_HOST/$KUBE_NAMESPACE/novnc/
    action: stop
  when: manual
  allow_failure: true # need to keep this to unlock the pipeline
