image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  GIT_SUBMODULE_STRATEGY: recursive
cache:
  paths:
    - build
stages:
  - deploy
  - lint
  - build
  - integration # no idea what this is for
  # - staging
  - test
  - upload
  - publish
  - pages
  - scan
include:
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/python.gitlab-ci.yml"
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/docs.gitlab-ci.yml"
  # OCI Images
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/oci-image.gitlab-ci.yml"
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/finaliser.gitlab-ci.yml"
  # Helm Charts
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/helm-chart.gitlab-ci.yml"
  # k8s steps
  # - project: "ska-telescope/templates-repository"
  #   file: "gitlab-ci/includes/k8s.gitlab-ci.yml"

  # changelog release page
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/changelog.gitlab-ci.yml"

  # deploy steps
  # - project: "ska-telescope/templates-repository"
  #   file: "gitlab-ci/includes/deploy.gitlab-ci.yml"

python-test:
  image: artefact.skao.int/ska-tango-images-pytango-builder:9.3.32
  before_script:
    - bash .make/resources/gitlab_section.sh upgrade_poetry "Upgrade Poetry" pip install --upgrade poetry

python-lint:
  image: artefact.skao.int/ska-tango-images-pytango-builder:9.3.32
  before_script:
    - bash .make/resources/gitlab_section.sh upgrade_poetry "Upgrade Poetry" pip install --upgrade poetry
  rules:
    - allow_failure: true

deploy-test-equipment:
  tags:
    - ska-k8srunner-za-itf
  image: $CI_REGISTRY/ska-telescope/ska-skampi/ska-skampi-ci:1.0.3
  stage: deploy
  variables:
    KUBE_NAMESPACE: mid-itf-test-equipment
    K8S_CHART: ska-mid-itf
    SERVICE_ACCOUNT: ci-svc-itf-mid
  before_script:
    - bash .make/resources/gitlab_section.sh upgrade_poetry "Upgrade Poetry" pip install --upgrade poetry
    - bash .make/resources/gitlab_section.sh vars "Make config dump" make vars
    - bash .make/resources/gitlab_section.sh creds "Create K8s Credentials" make itf-cluster-credentials
    - bash .make/resources/gitlab_section.sh get_all "Check all k8s resources in $KUBE_NAMESPACE" kubectl get all,pv,pvc,ingress -n $KUBE_NAMESPACE
  script:
    - make k8s-install-chart
  rules:
    - allow_failure: true
  when: manual
#### FROM SKAMPI, COPIED FOR REFERENCE:
# psi_mid_deploy_integration:
#   tags:
#   - k8srunner-psi-mid
#   variables:
#     VALUES: pipeline.yaml resources/deployment_configurations/psi-mid.yaml
#     CONFIG: mid
#     DEPLOYMENT_CONFIGURATION: ska-$CONFIG
#     K8S_CHART: "$DEPLOYMENT_CONFIGURATION"
#     INGRESS_HOST: INGRESS.IP.ADDRESS
#     HELM_RELEASE: integration-$CONFIG-$CI_JOB_ID
#     KUBE_NAMESPACE: integration-$CONFIG
#     KUBE_NAMESPACE_SDP: integration-$CONFIG-sdp
#     SERVICE_ACCOUNT: ci-svc-integration-$CONFIG
#     ARCHIVER_DBNAME: integration_$CONFIG_archiver_db
#   when: manual
#   stage: deploy_integration
#   extends:
#   - ".psi_mid_integration_job"
#   - ".psi_mid_deploy"
#   rules:
#   - if: "$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH"
#   before_script:
#   - echo $CI_JOB_NAME - $CI_JOB_STAGE
#   - bash .make/resources/gitlab_section.sh vars "Make config dump" make vars
#   - - bash .make/resources/gitlab_section.sh creds "Create K8s Credentials" make itf-cluster-credentials
#   - bash .make/resources/gitlab_section.sh install "Install Skampi Charts" make k8s-install-chart
#   - bash .make/resources/gitlab_section.sh get_all "Check all k8s resources in $KUBE_NAMESPACE"
#     kubectl get all,pv,pvc,ingress -n $KUBE_NAMESPACE
#   - bash .make/resources/gitlab_section.sh wait_for_it "Wait for all config jobs to complete"
#     make skampi-wait-all
#   script:
#   - make skampi-links
#   artifacts:
#     name: "$CI_PROJECT_NAME-$CI_JOB_ID"
#     paths:
#     - build/
#     reports:
#       junit:
#       - build/report.xml
