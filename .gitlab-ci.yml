image: $SKA_K8S_TOOLS_BUILD_DEPLOY

variables:
  MINIKUBE: "false"
  CI_DEBUG_SERVICES: "true"
  CI_REGISTRY_IMAGE: $CI_REGISTRY/ska-telescope/ska-mid-itf/base
  BASE_IMAGE_TAG: "0.1.2"
  TEST_IMAGE: $CI_REGISTRY_IMAGE:$BASE_IMAGE_TAG
  GIT_SUBMODULE_STRATEGY: recursive
  EXPOSE_All_DS: "true"
  CLEAN_UP_TEST_ENVIRONMENT: "true"
  DEPLOYMENT_CONFIGURATION: "ska-$CONFIG"
  POETRY_CONFIG_VIRTUALENVS_CREATE: "true"
  # PYTEST_SUBSYS_MARK: (csp_startup or sdp or eda)
  # K8S_INSTALL_FROM_CAR: "false"remove redundant cache
stages:
  - pre-build
  - verify-test-equipment
  - on_demand_itf_sut
  - build
  - lint
  - test
  - platform
  - test-equipment-setup
  - deploy-dish-aiv
  - remove-dish-aiv
  - integration
  - staging
  - upload
  - publish
  - pages
  - scan
include:
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/python.gitlab-ci.yml"
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/docs.gitlab-ci.yml"
  # OCI Images
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/oci-image.gitlab-ci.yml"
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/finaliser.gitlab-ci.yml"
  # Helm Charts
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/helm-chart.gitlab-ci.yml"
  # k8s steps
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/k8s-test-runner.gitlab-ci.yml"

  # changelog release page
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/changelog.gitlab-ci.yml"

  # deploy steps
  # - project: "ska-telescope/templates-repository"
  #   file: "gitlab-ci/includes/deploy.gitlab-ci.yml"

  - local: .gitlab/ci/common.yml
  - local: .gitlab/ci/sut.yml
  - local: .gitlab/ci/test-equipment.yml
  - local: .gitlab/ci/dish-structure-simulator.yml
  - local: .gitlab/ci/dish-aiv.yml
  - local: .gitlab/ci/ansible.yml

  # Upload Xray report
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/xray-publish.gitlab-ci.yml"

xray-publish:
  when: always #### TODO: Remove this and uncomment line just above this one!
  rules: !reference [publish-k8s-test-results, rules]

python-test:
  image: $TEST_IMAGE

python-lint:
  image: $TEST_IMAGE
  rules:
    - allow_failure: true

#### FROM SKAMPI, COPIED FOR REFERENCE:
.uninstall_chart:
  script:
    - echo $CI_JOB_NAME - $CI_JOB_STAGE
    - bash .make/resources/gitlab_section.sh vars "Make config dump" make vars
    - bash .make/resources/gitlab_section.sh env "Environment dump" env
    - make k8s-uninstall-chart || true
    - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all --ignore-not-found
    - make k8s-delete-namespace

python-build-for-publication-legacy:
  image: $TEST_IMAGE
  before_script:
    - ""

python-build-for-publication:
  image: $TEST_IMAGE
  before_script:
    - ""

python-build-for-development-legacy:
  image: $TEST_IMAGE
  before_script:
    - ""

python-build-for-development:
  image: $TEST_IMAGE
  before_script:
    - ""

# base stage
build-base-image:
  stage: .pre
  image: docker:19.03.12
  rules:
    - if: $REBUILD_IMAGES
    - changes:
        - images/base/Dockerfile
        - pyproject.toml
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - echo "Running on '$CI_COMMIT_BRANCH' branch; tag = $BASE_IMAGE_TAG"
    - mv images/base/Dockerfile .
    - docker build --pull -t "${CI_REGISTRY_IMAGE}:${BASE_IMAGE_TAG}" .
    - docker push "${CI_REGISTRY_IMAGE}:${BASE_IMAGE_TAG}"
