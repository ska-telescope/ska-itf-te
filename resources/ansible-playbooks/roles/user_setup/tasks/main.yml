---

- name: Setup variables
  block:
    # Sets the user name which we are working with.
    # This can be passed in from the command line with:
    # --extra-vars user_name=$USER_NAME
    # Otherwise the ansible user ID is used (this can be set with -u).
    - name: Set user_name
      ansible.builtin.set_fact:
        user_name: "{{ ansible_facts['user_id'] }}"
      when: user_name is not defined # use the logged-in user if the user is not set.

    # Finds the primary host group of the current ansible host.
    # This is the group defined in the inventory file.
    # This logic expects the host to only be present in two groups:
    # 1. The primary group (which we want to find).
    # 2. The catch all 'nodes' group.
    - name: Set host_group
      ansible.builtin.set_fact:
        host_group: "{{ item }}"
      when: item != 'nodes'
      loop: "{{ group_names }}"
      until: host_group is defined

    - name: Initialise user groups
      ansible.builtin.set_fact:
        user_groups: "{{ [{'name': user_name, 'create': True}] }}"

    # Lookup the groups in the user_groups_by_host_group dict and add them to the user_groups.
    - name: Add user groups from user_groups_by_host_group
      ansible.builtin.set_fact:
        user_groups: "{{ user_groups + user_groups_by_host_group[host_group] }}"
      when: host_group in user_groups_by_host_group

    # We expect that the first element in the user_groups list is the user's primary group.
    - name: Set primary user group
      ansible.builtin.set_fact:
        user_primary_group: "{{ user_groups[0]['name'] }}"

    - name: Set user groups list
      vars:
        user_groups_list: []
      ansible.builtin.set_fact:
        user_groups_list: "{{ user_groups_list + [item['name']] }}"
      loop: "{{ user_groups }} "

- name: Debug
  ansible.builtin.debug:
    msg: "Variables used: user_name = {{ user_name }}; user_groups = {{ user_groups }}; host_group = {{ host_group }}"
    verbosity: 2

  # Creates a new user and adds them to sudoers if so configured.
- name: Create user
  when: createuser
  become: true
  block:
    - name: Create user groups
      ansible.builtin.group:
        name: "{{ item['name'] }}"
        state: present
      loop: "{{ user_groups }}"
      when: item['create']

    - name: Create user account
      ansible.builtin.user:
        name: "{{ user_name }}"
        shell: /bin/bash
        group: "{{ user_primary_group }}"
        groups: "{{ user_groups_list }}"
        append: true

    - name: Add to sudoers
      ansible.builtin.lineinfile:
        line: "{{ user_name }} ALL=(ALL) NOPASSWD:ALL"
        path: "/etc/sudoers.d/99-systems-team"
        regex: "{{ user_name }}"
        create: true
        owner: "root"
        group: "root"
        mode: "0440"
      when: host_group in add_to_sudoers and add_to_sudoers[host_group]

- name: Remove users
  become: true
  when: removeuser
  block:
    - name: Remove user account
      ansible.builtin.user:
        name: "{{ user_name }}"
        state: absent
        remove: true

    - name: Remove from sudoers
      ansible.builtin.lineinfile:
        path: "/etc/sudoers.d/99-systems-team"
        regex: "{{ user_name }}"
        state: absent
