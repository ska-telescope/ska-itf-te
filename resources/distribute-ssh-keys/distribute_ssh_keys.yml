#!/usr/bin/env ansible-playbook
---

- name: "Update ssh keys"
  hosts:
    - all

  tasks:

    - name: Setup variables
      tags:
        - adduser
        - addkey
        - removeuser
        - removekey
      block:
        # Sets the user name which we are working with.
        # This can be passed in from the command line with:
        # --extra-vars user_name=$USER_NAME
        # Otherwise the ansible user ID is used (this can be set with -u).
        - name: Set user_name
          ansible.builtin.set_fact:
            user_name: "{{ ansible_facts['user_id'] }}"
          when: user_name is not defined # use the logged-in user if the user is not set.

        # Finds the primary host group of the current ansible host.
        # This is the group defined in the inventory file.
        # This logic expects the host to only be present in two groups:
        # 1. The primary group (which we want to find).
        # 2. The catch all 'nodes' group.
        - name: Set host_group
          ansible.builtin.set_fact:
            host_group: "{{ item }}"
          when: item != 'nodes'
          loop: "{{ group_names }}"
          until: host_group is defined

        # Sets the groups which the user belongs to.
        # It tries to lookup the groups in the user_groups_by_host_group dict.
        # If nothing is found, it falls back to using the user_name as the group.
        # If the groups are set on the command line with the following parameter:
        # --extra-vars user_groups=$USER_NAME
        # Then this task will not be executed.
        - name: Set user groups
          ansible.builtin.set_fact:
            user_groups: "{{ [user_name] if host_group not in user_groups_by_host_group else user_groups_by_host_group[host_group] }}"
          when: user_groups is not defined

        # We expect that the first element in the user_groups list is the user's primary group.
        - name: Set primary user group
          ansible.builtin.set_fact:
            user_primary_group: "{{ user_groups[0] }}"

    # Finds the SSH key associated with the user_name
    # by comparing it to the last word in each item in the all_ssh_keys list.
    # This word should be a user_name.
    - name: Find SSH key
      tags:
        - adduser
        - addkey
        - removeuser
        - removekey
      ansible.builtin.set_fact:
        ssh_key: "{{ item }}"
      loop: "{{ all_ssh_keys }}"
      when: item.split()[-1] == user_name

    - name: Debug
      tags:
        - adduser
        - addkey
        - removeuser
        - removekey
      ansible.builtin.debug:
        msg: "Variables used: user_name = {{ user_name }}; ssh_key = {{ ssh_key }}; user_groups = {{ user_groups }}; host_group = {{ host_group }}"
        verbosity: 2

     # Creates a new user and adds them to sudoers if so configured.
    - name: Create user
      become: true
      tags:
        - adduser
      block:
        - name: Create user account
          ansible.builtin.user:
            name: "{{ user_name }}"
            shell: /bin/bash
            group: "{{ user_primary_group }}"
            groups: "{{ user_groups }}"
            append: true

        - name: Add to sudoers
          ansible.builtin.lineinfile:
            line: "{{ user_name }} ALL=(ALL) NOPASSWD:ALL"
            path: "/etc/sudoers.d/99-systems-team"
            regex: "{{ user_name }}"
            create: true
            owner: "root"
            group: "root"
            mode: "0440"

    - name: Add key
      # we only need to be sudo if this is being executed as a different user.
      become: "{{ 'no' if user_name == ansible_facts['user_id'] else 'yes' }}"
      tags:
        - adduser
        - addkey
      block:
        - name: Create ~/.ssh/
          ansible.builtin.file:
            path: "/home/{{ user_name }}/.ssh"
            state: directory
            owner: "{{ user_name }}"
            group: "{{ user_primary_group }}"
            mode: "0700"

        - name: Add to authorized_keys
          ansible.builtin.lineinfile:
            line: "{{ ssh_key }}"
            path: "/home/{{ user_name }}/.ssh/authorized_keys"
            regex: "{{  ssh_key.split()[1] | regex_escape() }}" # use the hash to match
            create: true
            owner: "{{ user_name }}"
            group: "{{ user_primary_group }}"
            mode: "0600"

    - name: Remove users
      become: true
      tags:
        - removeuser
      block:
        - name: Remove user account
          ansible.builtin.user:
            name: "{{ user_name }}"
            state: absent
            remove: true

        - name: Remove from sudoers
          ansible.builtin.lineinfile:
            path: "/etc/sudoers.d/99-systems-team"
            regex: "{{ user_name }}"
            state: absent

    - name: Remove ssh key
      tags:
        - removekey
      # we only need to be sudo if this is being executed as a different user.
      become: "{{ 'no' if user_name == ansible_facts['user_id'] else 'yes' }}"
      ansible.builtin.lineinfile:
        line: "{{ ssh_key }}"
        dest: "/home/{{ user_name }}/.ssh/authorized_keys"
        state: absent
