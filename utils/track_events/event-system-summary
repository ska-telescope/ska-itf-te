#!/usr/bin/env python

from tango import DeviceProxy, DevFailed
from argparse import ArgumentParser
import json
import statistics
import time

def build_parser() -> ArgumentParser:
    parser = ArgumentParser(
        prog="event-system-summarizer",
        description="Called QueryEventSystem periodically and summarizes the output",
    )
    parser.add_argument('device', help='device or admin device to connect to')
    parser.add_argument('--poll-period', help='period between polls in seconds', type=float, default=10.0)

    return parser

def print_stats(sorted_array, name, units=' (μs)'):
    mean = float(statistics.mean(sorted_array))
    stdev = float(statistics.pstdev(sorted_array))
    err = stdev / (len(sorted_array) ** 0.5)
    minimum = min(sorted_array)
    maximum = max(sorted_array)
    pc10 = sorted_array[len(sorted_array) // 10]
    pc90 = sorted_array[len(sorted_array) - len(sorted_array) // 10]
    name = name + units;
    print(f"\t{name:>30}: {mean:10.2f}±{err:<10.2f} (min={minimum}, 10%={pc10}, 90%={pc90} max={maximum})")

def print_summary(data):
    server = data['server']
    if len(server['event_counters']) > 0:
        print('Published event counts:')
        for k, v in server['event_counters'].items():
            print(f'\t{k}: {v}')
    if server['perf_stats'] is not None and len(server['perf_stats']) > 0:
        print('Publishing performance:')
        stats = server['perf_stats']
        micros_since_last_events = sorted(x["micros_since_last_event"] for x in stats)
        print_stats(micros_since_last_events, "Event Gaps")
        push_event_micros = sorted(x["push_event_micros"] for x in stats)
        print_stats(push_event_micros, "Event push time")

    if 'client' in data:
        client = data['client']
        if len(client['event_callbacks']) > 0:
            print('Recieved event counts:')
            for k, v in client['event_callbacks'].items():
                print(f'\t{k}: {v["counter"]} ({v["callback_count"]} callback(s) registered)')
        if client['perf_stats'] is not None and len(client['perf_stats']) > 0:
            stats = client['perf_stats']
            print('Subscription performance:')
            micros_since_last_events = sorted(x["micros_since_last_event"] for x in stats)
            print_stats(micros_since_last_events, "Event Gaps")
            sleep_micros = sorted(x["sleep_micros"] for x in stats)
            print_stats(sleep_micros, "Sleeping time")
            process_micros = sorted(x["process_micros"] for x in stats)
            print_stats(process_micros, "Processing time")
            first_callback_latency = sorted(x["first_callback_lactency_micros"] for x in stats if x["first_callback_lactency_micros"] != -1)
            print_stats(first_callback_latency, "First callback latency")
            callback_count = sorted(x["callback_count"] for x in stats)
            print_stats(callback_count, "Callback Count")
            wake_count = sorted(x["wake_count"] for x in stats)
            print_stats(wake_count, "Wake Count")

def main(args: dict):
    name = args.device
    display_name = name
    dp = DeviceProxy(name)

    if dp.info().dev_class != 'DServer':
        adm_name = dp.adm_name()
        display_name = f'{adm_name} (from {name})'
        name = adm_name
        dp = DeviceProxy(name)

    if 'QueryEventSystem' not in dp.get_command_list():
        print(f'{display_name} does not support QueryEventSystem, is this pod using "PyTango 9.5.1234"?', file=sys.stderr)
        sys.exit(1)

    while(True):
        next_poll = time.time() + args.poll_period

        try:
            data = dp.QueryEventSystem()
            print_summary(json.loads(data))
        except DevFailed as exc:
            print(exc, file=sys.stderr)

        sleep_for = next_poll - time.time()
        if sleep_for > 0.001:
            time.sleep(sleep_for)
        elif sleep_for < 0:
            print(f'poll time missed by {-sleep_for}s', file=sys.stderr)


if __name__ == '__main__':
    args = build_parser().parse_args()
    main(args)
